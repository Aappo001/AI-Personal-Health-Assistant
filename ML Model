# Required libraries for NLP and machine learning
import pandas as pd
import spacy
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.feature_extraction.text import TfidfVectorizer

# Load spaCy model for English (pre-trained)
nlp = spacy.load("en_core_web_sm")

# Sample dataset: Assume you have a CSV file with symptoms and diagnoses
data = pd.read_csv('your_dataset.csv')

# Features and target
X = data.drop('Diagnosis', axis=1)  # Features (symptoms)
y = data['Diagnosis']  # Target (diagnosis)

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initializing the RandomForestClassifier
model = RandomForestClassifier(n_estimators=100, random_state=42)

# Training the model
model.fit(X_train, y_train)

# NLP Symptom Extraction Function
def extract_symptoms(user_input):
    """
    Extract relevant symptoms from the user's natural language input.
    """
    doc = nlp(user_input.lower())  # Process input through spaCy
    symptoms = []
    # Loop through tokens to identify potential symptom keywords
    for token in doc:
        # Example: Identifying nouns as potential symptoms (can be extended with medical knowledge)
        if token.pos_ == "NOUN" or token.pos_ == "ADJ":
            symptoms.append(token.lemma_)  # Append the base form of the word
    return symptoms

# Symptom Matching Function
def match_symptoms_to_features(symptoms, feature_columns):
    """
    Map extracted symptoms to the corresponding feature columns in the dataset.
    """
    symptom_features = {col: 0 for col in feature_columns}  # Initialize all features to 0
    for symptom in symptoms:
        for col in feature_columns:
            if symptom in col.lower():  # Simple matching logic (can be improved with synonyms)
                symptom_features[col] = 1  # Set the corresponding feature to 1 if the symptom is found
    return symptom_features

# Example function for predicting diagnosis based on natural language input
def predict_diagnosis_nlp(user_input):
    symptoms = extract_symptoms(user_input)  # Extract symptoms from user input
    symptom_features = match_symptoms_to_features(symptoms, X.columns)  # Map to features
    input_data = pd.DataFrame([symptom_features])  # Convert to DataFrame for model
    prediction = model.predict(input_data)  # Predict diagnosis
    return prediction[0]

# Example usage of the function
user_input = "I have a headache and feel dizzy"  # Example user input
diagnosis = predict_diagnosis_nlp(user_input)
print(f'Predicted diagnosis: {diagnosis}')

# Evaluating the model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')
print(classification_report(y_test, y_pred))
